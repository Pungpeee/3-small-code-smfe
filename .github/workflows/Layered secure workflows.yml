# name: Layered secure workflows
 
# on:
#   push:
#     branches:
#       main
 
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # - name: (Code) Sonarqube source code scan
#       #   uses: docker://sonarsource/sonar-scanner-cli:latest
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.TOKEN }}
#       #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

#       - name: Build image
#         run: docker build -t pungpeee19/3-small-code-smfe:latest .


#       # - name: Run Snyk to check for vulnerabilities
#       #   uses: snyk/actions/python@master
#       #   env:
#       #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#       #   with:
#       #     command: test
#       #     args:  --file=requirements.txt --severity-threshold=critical,high


#       - name: Push image to Docker Hub
#         run: |
#           docker login -u pungpeee19 -p ${{ secrets.DOCKER_HUB_TOKEN }}
#           docker push pungpeee19/3-small-code-smfe:latest
      
#       - name: (Build) Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: 'pungpeee19/3-small-code-smfe:latest'
#           format: 'table'
#           vuln-type: 'library'
#           severity: 'CRITICAL,HIGH'
 
#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
 
#     steps:
#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.5.3
#         with:
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

#       - name: Deploy to Remote Server
#         run: |
#           ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} << 'EOF'
          
#           # Log in to Docker Hub
#           echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u pungpeee19 --password-stdin

#           # Pull the latest image
#           docker pull pungpeee19/3-small-code-smfe:latest

#           # Stop and remove the existing container if it exists
#           if [ $(docker ps -q -f name=3-small-code-smfe) ]; then
#             docker stop 3-small-code-smfe
#             docker rm 3-small-code-smfe
#           fi

#           # Run the new container
#           docker run -d --restart=always -p 1001:3000 --name 3-small-code-smfe pungpeee19/3-small-code-smfe:latest

#           # Verify running containers
#           docker ps -a
          
#           EOF
          
#       - name: ZAP Scan
#         uses: zaproxy/action-baseline@v0.14.0
#         with:
#           token: ${{ secrets.TOKEN }}
#           target: 'http://20.212.250.197:1001'
#           artifact_name: 'zapreport-3-small-code-smfe.html'

          

#       - name: Login to Docker Hub & Deploy code and start Docker container
#         run: |
#             docker login -u pungpeee19 -p ${{ secrets.DOCKER_HUB_TOKEN }}
#             ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} 
#             docker pull pungpeee19/3-small-code-smfe:latest
#             docker images
#             docker run -d --restart=always -p 1001:3000 \
#                 --name 3-small-code-smfe \
#                 pungpeee19/3-small-code-smfe:latest
